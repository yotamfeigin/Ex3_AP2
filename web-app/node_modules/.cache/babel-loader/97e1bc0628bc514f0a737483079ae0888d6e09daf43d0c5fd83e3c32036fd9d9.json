{"ast":null,"code":"function validatePassword(password) {\n  // Check if password is at least 8 characters long\n  if (password.length < 8) {\n    return 'length';\n  }\n\n  // Check if password contains at least one uppercase letter\n  const hasUpperCase = /[A-Z]/.test(password);\n  if (!hasUpperCase) {\n    return 'upper';\n  }\n\n  // Check if password contains at least one lowercase letter\n  const hasLowerCase = /[a-z]/.test(password);\n  if (!hasLowerCase) {\n    return 'lower';\n  }\n\n  // Check if password contains at least one digit\n  const hasDigit = /\\d/.test(password);\n  if (!hasDigit) {\n    return 'digit';\n  }\n\n  // Check if password contains at least one special character\n  const hasSpecialCharacter = /[-!@#$%^&*()_+|[\\]{};:/<>,.?]/.test(password);\n  if (!hasSpecialCharacter) {\n    return 'special';\n  }\n\n  // If password passes all checks, return true\n  return 'fine';\n}\nfunction formatDate(created) {\n  if (!created) {\n    // if created is null\n    return \"\";\n  }\n  const date = new Date(created);\n  console.log(date);\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  const hours = date.getHours().toString().padStart(2, '0');\n  const minutes = date.getMinutes().toString().padStart(2, '0');\n  const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}`;\n  return formattedDate;\n}\nfunction breakLongWord(text, maxLength) {\n  const words = text.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > maxLength && word.indexOf('\\n') === -1) {\n      const brokenWord = [];\n      let currentPosition = 0;\n      while (currentPosition < word.length) {\n        brokenWord.push(word.slice(currentPosition, currentPosition + maxLength));\n        currentPosition += maxLength;\n      }\n      words[i] = brokenWord.join('\\n');\n    }\n  }\n  return words.join(' ');\n}\nexport { validatePassword, formatDate, breakLongWord };","map":{"version":3,"names":["validatePassword","password","length","hasUpperCase","test","hasLowerCase","hasDigit","hasSpecialCharacter","formatDate","created","date","Date","console","log","year","getFullYear","month","getMonth","toString","padStart","day","getDate","hours","getHours","minutes","getMinutes","formattedDate","breakLongWord","text","maxLength","words","split","i","word","indexOf","brokenWord","currentPosition","push","slice","join"],"sources":["C:/Users/yuval/Documents/GitHub/ex2_mitkadem2/web-app/src/register/functions.js"],"sourcesContent":["function validatePassword(password) {\r\n    // Check if password is at least 8 characters long\r\n    if (password.length < 8) {\r\n      return 'length';\r\n    }\r\n  \r\n    // Check if password contains at least one uppercase letter\r\n    const hasUpperCase = /[A-Z]/.test(password);\r\n    if (!hasUpperCase) {\r\n      return 'upper';\r\n    }\r\n  \r\n    // Check if password contains at least one lowercase letter\r\n    const hasLowerCase = /[a-z]/.test(password);\r\n    if (!hasLowerCase) {\r\n      return 'lower';\r\n    }\r\n  \r\n    // Check if password contains at least one digit\r\n    const hasDigit = /\\d/.test(password);\r\n    if (!hasDigit) {\r\n      return 'digit';\r\n    }\r\n  \r\n    // Check if password contains at least one special character\r\n    const hasSpecialCharacter = /[-!@#$%^&*()_+|[\\]{};:/<>,.?]/.test(password);\r\n    if (!hasSpecialCharacter) {\r\n      return 'special';\r\n    }\r\n  \r\n    // If password passes all checks, return true\r\n    return 'fine';\r\n  }\r\n\r\nfunction formatDate(created) {\r\n  if(!created){ // if created is null\r\n    return \"\";\r\n  }\r\n\r\n  const date = new Date(created);\r\n    console.log(date);\r\n\r\n    const year = date.getFullYear();\r\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = date.getDate().toString().padStart(2, '0');\r\n    const hours = date.getHours().toString().padStart(2, '0');\r\n    const minutes = date.getMinutes().toString().padStart(2, '0');\r\n    const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}`;\r\n    return formattedDate;\r\n}\r\n\r\nfunction breakLongWord(text, maxLength) {\r\n  const words = text.split(' ');\r\n\r\n  for (let i = 0; i < words.length; i++) {\r\n    const word = words[i];\r\n\r\n    if (word.length > maxLength && word.indexOf('\\n') === -1) {\r\n      const brokenWord = [];\r\n      let currentPosition = 0;\r\n\r\n      while (currentPosition < word.length) {\r\n        brokenWord.push(word.slice(currentPosition, currentPosition + maxLength));\r\n        currentPosition += maxLength;\r\n      }\r\n\r\n      words[i] = brokenWord.join('\\n');\r\n    }\r\n  }\r\n\r\n  return words.join(' ');\r\n}\r\n\r\n\r\n  export  {validatePassword, formatDate, breakLongWord};\r\n"],"mappings":"AAAA,SAASA,gBAAgBA,CAACC,QAAQ,EAAE;EAChC;EACA,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IACvB,OAAO,QAAQ;EACjB;;EAEA;EACA,MAAMC,YAAY,GAAG,OAAO,CAACC,IAAI,CAACH,QAAQ,CAAC;EAC3C,IAAI,CAACE,YAAY,EAAE;IACjB,OAAO,OAAO;EAChB;;EAEA;EACA,MAAME,YAAY,GAAG,OAAO,CAACD,IAAI,CAACH,QAAQ,CAAC;EAC3C,IAAI,CAACI,YAAY,EAAE;IACjB,OAAO,OAAO;EAChB;;EAEA;EACA,MAAMC,QAAQ,GAAG,IAAI,CAACF,IAAI,CAACH,QAAQ,CAAC;EACpC,IAAI,CAACK,QAAQ,EAAE;IACb,OAAO,OAAO;EAChB;;EAEA;EACA,MAAMC,mBAAmB,GAAG,+BAA+B,CAACH,IAAI,CAACH,QAAQ,CAAC;EAC1E,IAAI,CAACM,mBAAmB,EAAE;IACxB,OAAO,SAAS;EAClB;;EAEA;EACA,OAAO,MAAM;AACf;AAEF,SAASC,UAAUA,CAACC,OAAO,EAAE;EAC3B,IAAG,CAACA,OAAO,EAAC;IAAE;IACZ,OAAO,EAAE;EACX;EAEA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,OAAO,CAAC;EAC5BG,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EAEjB,MAAMI,IAAI,GAAGJ,IAAI,CAACK,WAAW,CAAC,CAAC;EAC/B,MAAMC,KAAK,GAAG,CAACN,IAAI,CAACO,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC/D,MAAMC,GAAG,GAAGV,IAAI,CAACW,OAAO,CAAC,CAAC,CAACH,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACtD,MAAMG,KAAK,GAAGZ,IAAI,CAACa,QAAQ,CAAC,CAAC,CAACL,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACzD,MAAMK,OAAO,GAAGd,IAAI,CAACe,UAAU,CAAC,CAAC,CAACP,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC7D,MAAMO,aAAa,GAAI,GAAEZ,IAAK,IAAGE,KAAM,IAAGI,GAAI,IAAGE,KAAM,IAAGE,OAAQ,EAAC;EACnE,OAAOE,aAAa;AACxB;AAEA,SAASC,aAAaA,CAACC,IAAI,EAAEC,SAAS,EAAE;EACtC,MAAMC,KAAK,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;EAE7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAAC5B,MAAM,EAAE8B,CAAC,EAAE,EAAE;IACrC,MAAMC,IAAI,GAAGH,KAAK,CAACE,CAAC,CAAC;IAErB,IAAIC,IAAI,CAAC/B,MAAM,GAAG2B,SAAS,IAAII,IAAI,CAACC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;MACxD,MAAMC,UAAU,GAAG,EAAE;MACrB,IAAIC,eAAe,GAAG,CAAC;MAEvB,OAAOA,eAAe,GAAGH,IAAI,CAAC/B,MAAM,EAAE;QACpCiC,UAAU,CAACE,IAAI,CAACJ,IAAI,CAACK,KAAK,CAACF,eAAe,EAAEA,eAAe,GAAGP,SAAS,CAAC,CAAC;QACzEO,eAAe,IAAIP,SAAS;MAC9B;MAEAC,KAAK,CAACE,CAAC,CAAC,GAAGG,UAAU,CAACI,IAAI,CAAC,IAAI,CAAC;IAClC;EACF;EAEA,OAAOT,KAAK,CAACS,IAAI,CAAC,GAAG,CAAC;AACxB;AAGE,SAASvC,gBAAgB,EAAEQ,UAAU,EAAEmB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}